// Code generated by "enumer -type=Canonical -transform=snake"; DO NOT EDIT.

package source

import (
	"fmt"
)

const _CanonicalName = "githubgitlabtrellozeplin"

var _CanonicalIndex = [...]uint8{0, 6, 12, 18, 24}

const _CanonicalLowerName = "githubgitlabtrellozeplin"

func (i Canonical) String() string {
	if i < 0 || i >= Canonical(len(_CanonicalIndex)-1) {
		return fmt.Sprintf("Canonical(%d)", i)
	}
	return _CanonicalName[_CanonicalIndex[i]:_CanonicalIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CanonicalNoOp() {
	var x [1]struct{}
	_ = x[Github-(0)]
	_ = x[Gitlab-(1)]
	_ = x[Trello-(2)]
	_ = x[Zeplin-(3)]
}

var _CanonicalValues = []Canonical{Github, Gitlab, Trello, Zeplin}

var _CanonicalNameToValueMap = map[string]Canonical{
	_CanonicalName[0:6]:        Github,
	_CanonicalLowerName[0:6]:   Github,
	_CanonicalName[6:12]:       Gitlab,
	_CanonicalLowerName[6:12]:  Gitlab,
	_CanonicalName[12:18]:      Trello,
	_CanonicalLowerName[12:18]: Trello,
	_CanonicalName[18:24]:      Zeplin,
	_CanonicalLowerName[18:24]: Zeplin,
}

var _CanonicalNames = []string{
	_CanonicalName[0:6],
	_CanonicalName[6:12],
	_CanonicalName[12:18],
	_CanonicalName[18:24],
}

// CanonicalString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CanonicalString(s string) (Canonical, error) {
	if val, ok := _CanonicalNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Canonical values", s)
}

// CanonicalValues returns all values of the enum
func CanonicalValues() []Canonical {
	return _CanonicalValues
}

// CanonicalStrings returns a slice of all String values of the enum
func CanonicalStrings() []string {
	strs := make([]string, len(_CanonicalNames))
	copy(strs, _CanonicalNames)
	return strs
}

// IsACanonical returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Canonical) IsACanonical() bool {
	for _, v := range _CanonicalValues {
		if i == v {
			return true
		}
	}
	return false
}
